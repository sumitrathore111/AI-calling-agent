"use client";
import { useEffect, useState } from "react";
import { FaClock, FaBuilding, FaStar, FaCheckCircle, FaTimesCircle } from "react-icons/fa";

type Lead = {
  id: string;
  name: string;
  qualified: boolean;
  company: string;
  interest: string;
  budget: string;
  timeline: string;
  lead_score: number; // 0-100
  created_at: string;
  call_duration: number; // seconds
};

export default function LeadsPage() {
  // Example static data to demonstrate layout. Replace with your API data.
  const [leads, setLeads] = useState<Lead[]>([
    {
      id: "1",
      name: "John Smith",
      qualified: true,
      company: "Tech Solutions Inc",
      interest: "Enterprise Software",
      budget: "$50,000+",
      timeline: "3 months",
      lead_score: 85,
      created_at: "2024-01-15T04:32:00",
      call_duration: 272, // 4:32
    },
    {
      id: "2",
      name: "Sarah Williams",
      qualified: true,
      company: "Digital Marketing Co",
      interest: "Marketing Automation",
      budget: "$25,000-$50,000",
      timeline: "6 months",
      lead_score: 72,
      created_at: "2024-01-15T06:15:00",
      call_duration: 375, // 6:15
    },
    {
      id: "3",
      name: "Mike Wilson",
      qualified: false,
      company: "Small Business",
      interest: "Basic Plan",
      budget: "Under $1,000",
      timeline: "Not specified",
      lead_score: 25,
      created_at: "2024-01-15T02:48:00",
      call_duration: 168, // 2:48
    },
  ]);
  const [filter, setFilter] = useState<"All" | "Qualified" | "Not Qualified">("All");

  const filteredLeads = leads.filter((lead) => {
    if (filter === "Qualified") return lead.qualified;
    if (filter === "Not Qualified") return !lead.qualified;
    return true;
  });

  // Summary stats (you can replace these with calculated values or from API)
  const totalLeads = leads.length;
  const qualifiedCount = leads.filter((l) => l.qualified).length;
  const conversionRate = totalLeads ? ((qualifiedCount / totalLeads) * 100).toFixed(1) : "0";
  const avgScore =
    totalLeads > 0
      ? Math.round(leads.reduce((acc, lead) => acc + lead.lead_score, 0) / totalLeads)
      : 0;
  const totalValue = "$1,250,000"; // Static for example

  const formatDuration = (sec: number) => {
    const m = Math.floor(sec / 60);
    const s = sec % 60;
    return `${m}:${s.toString().padStart(2, "0")}`;
  };

  return (
    <div className="p-6 max-w-6xl mx-auto space-y-6">
      <h1 className="text-2xl font-bold">Lead Generation</h1>
      <p className="text-slate-600 mb-4">
        Analyze and manage leads generated by your AI voice agent
      </p>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-3 md:grid-cols-5 gap-4 mb-6">
        <SummaryCard title="Total Leads" value={totalLeads} icon={<FaBuilding className="text-gray-400" />} />
        <SummaryCard
          title="Qualified"
          value={qualifiedCount}
          icon={<FaCheckCircle className="text-green-500" />}
        />
        <SummaryCard title="Conversion Rate" value={`${conversionRate}%`} />
        <SummaryCard title="Avg Score" value={`${avgScore}/100`} />
        <SummaryCard title="Total Value" value={totalValue} />
      </div>

      {/* Filter Buttons */}
      <div className="flex gap-3 mb-6">
        {(["All", "Qualified", "Not Qualified"] as const).map((opt) => (
          <button
            key={opt}
            className={`px-4 py-2 rounded-md border ${
              filter === opt
                ? "bg-black text-white border-black"
                : "bg-white text-black border-gray-300"
            } font-semibold`}
            onClick={() => setFilter(opt)}
          >
            {opt} Leads
          </button>
        ))}
      </div>

      {/* Leads List */}
      <div className="space-y-4">
        {filteredLeads.map((lead) => (
          <div
            key={lead.id}
            className="flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 rounded-lg border border-gray-200 bg-white shadow-sm"
          >
            <div className="flex items-center gap-4 mb-3 sm:mb-0">
              {/* Icon with background */}
              <div
                className={`p-3 rounded-full ${
                  lead.qualified ? "bg-green-200" : "bg-red-200"
                } text-green-700`}
              >
                <FaBuilding size={24} />
              </div>

              <div>
                {/* Name and Qualified badge */}
                <div className="flex items-center gap-2 font-semibold text-lg text-black">
                  <span>{lead.name}</span>
                  <QualifiedBadge qualified={lead.qualified} />
                  <div className="flex items-center gap-1 text-yellow-500">
                    <FaStar />
                    <span>{lead.lead_score}/100</span>
                  </div>
                </div>

                <div className="flex text-gray-600 text-sm mt-1 gap-6 max-w-xs flex-wrap">
                  <LeadInfo label="Company" value={lead.company} />
                  <LeadInfo label="Interest" value={lead.interest} />
                  <LeadInfo label="Budget" value={lead.budget} />
                  <LeadInfo label="Timeline" value={lead.timeline} />
                </div>

                {/* Lead score progress bar */}
                <div className="mt-2 text-xs">
                  <div>Lead Score:</div>
                  <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                    <div
                      className="h-2 bg-black"
                      style={{ width: `${lead.lead_score}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            </div>

            {/* Right side info */}
            <div className="text-right text-sm text-gray-700 flex flex-col justify-between items-end">
              <div>{new Date(lead.created_at).toLocaleDateString()}</div>
              <div className="flex items-center gap-1 text-gray-500 mt-1 mb-3">
                <FaClock />
                <span>{formatDuration(lead.call_duration)}</span>
              </div>
              <button className="font-semibold hover:underline">View Details</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// Summary card component
function SummaryCard({
  title,
  value,
  icon,
}: {
  title: string;
  value: string | number;
  icon?: React.ReactNode;
}) {
  return (
    <div className="flex items-center justify-between p-4 rounded-xl border border-gray-200 bg-white">
      <div>
        <div className="text-xs font-semibold text-gray-800">{title}</div>
        <div className="text-xl font-bold">{value}</div>
      </div>
      {icon && <div className="text-3xl">{icon}</div>}
    </div>
  );
}

// Qualified badge
function QualifiedBadge({ qualified }: { qualified: boolean }) {
  return (
    <span
      className={`px-2 py-0.5 rounded-full text-xs font-semibold text-white ${
        qualified ? "bg-black" : "bg-red-600"
      }`}
    >
      {qualified ? "Qualified" : "Not Qualified"}
    </span>
  );
}

// Lead info label + value small component
function LeadInfo({ label, value }: { label: string; value: string }) {
  return (
    <div>
      <div className="font-semibold">{value}</div>
      <div className="text-[10px] text-gray-400">{label}</div>
    </div>
  );
}